#version 430 core

#define MAX_PARTICLES 65536
#define MAX_NEIGHBORS 64

layout(local_size_x = 128) in;

struct GPUParticle {
    vec4 position;
    vec4 velocity;
    vec4 acceleration;
    float density;
    float pressure;
    float mass;
    float pad1; // For 16-byte alignment
};

struct CellRange {
    uint startIdx;
    uint endIdx;
};

// Binding locations
layout(std430, binding = 0) buffer Particles {
    GPUParticle particles[];
};

layout(std430, binding = 1) buffer Hashes {
    uint cellIndices[];  // Flattened indices for each particle
};

layout(std430, binding = 2) buffer Ranges {
    CellRange cellRanges[]; // For each cell
};

// Uniforms
uniform float smoothingRadius;
uniform float mass;
uniform float restDensity;
uniform float gasConstant;
uniform float viscosity;
uniform float dt;

const float PI = 3.14159265359;

// Kernel functions
float poly6(float r, float h) {
    if (r >= 0 && r <= h) {
        float hr2 = h * h - r * r;
        return (315.0 / (64.0 * PI * pow(h, 9))) * pow(hr2, 3);
    }
    return 0.0;
}

vec3 spikyGrad(vec3 r, float h) {
    float r_len = length(r);
    if (r_len > 0 && r_len <= h) {
        float coeff = -45.0 / (PI * pow(h, 6)) * pow(h - r_len, 2);
        return coeff * normalize(r);
    }
    return vec3(0);
}

float viscosityLaplacian(float r, float h) {
    if (r >= 0 && r <= h) {
        return 45.0 / (PI * pow(h, 6)) * (h - r);
    }
    return 0.0;
}

// Cell coordinate to index helper (assumes uniform domain)
uvec3 computeGridCoord(vec3 position, vec3 domainMin, vec3 cellSize) {
    return uvec3(floor((position - domainMin) / cellSize));
}

// Pass 1: Compute density & pressure
void main() {
    uint i = gl_GlobalInvocationID.x;
    if (i >= particles.length()) return;

    GPUParticle pi = particles[i];
    float density = 0.0;

    for (uint j = 0; j < particles.length(); ++j) {
        if (i == j) continue;
        vec3 rij = pi.position.xyz - particles[j].position.xyz;
        float r = length(rij);
        density += mass * poly6(r, smoothingRadius);
    }

    particles[i].density = density;
    particles[i].pressure = gasConstant * (density - restDensity);
}

// Barrier before next dispatch pass
// memoryBarrierShared(); barrier(); (for shared memory passes)

// Pass 2: Compute forces and integrate
// This could be in a second dispatch or second main()

// You'll typically split the above into separate shaders or dispatches
