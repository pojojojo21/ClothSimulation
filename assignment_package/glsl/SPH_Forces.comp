#version 430 core

layout(local_size_x = 128) in;

struct GPUParticle {
    vec4 position;       // xyz: position, w: unused
    vec4 velocity;       // xyz: velocity, w: unused
    vec4 acceleration;   // xyz: acceleration, w: unused
    float density;
    float pressure;
    float mass;
    float pad1; // For alignment
};

layout(std430, binding = 0) buffer Particles {
    GPUParticle particles[];
};

uniform float smoothingRadius;
uniform float mass;
uniform float viscosity;
uniform float dt;

const float PI = 3.14159265359;
const vec3 gravity = vec3(0.0, -9.8, 0.0);

float viscosityLaplacian(float r, float h) {
    if (r >= 0 && r <= h) {
        return 45.0 / (PI * pow(h, 6)) * (h - r);
    }
    return 0.0;
}

vec3 spikyGrad(vec3 r, float h) {
    float r_len = length(r);
    if (r_len > 0 && r_len <= h) {
        float coeff = -45.0 / (PI * pow(h, 6)) * pow(h - r_len, 2);
        return coeff * normalize(r);
    }
    return vec3(0);
}

void main() {
    uint i = gl_GlobalInvocationID.x;
    if (i >= particles.length()) return;

    GPUParticle pi = particles[i];
    vec3 forcePressure = vec3(0.0);
    vec3 forceViscosity = vec3(0.0);

    for (uint j = 0; j < particles.length(); ++j) {
        if (i == j) continue;

        GPUParticle pj = particles[j];
        vec3 rij = pi.position.xyz - pj.position.xyz;
        float r = length(rij);

        if (r > 0.0 && r <= smoothingRadius) {
            // Pressure force
            float avgPressure = (pi.pressure + pj.pressure) / (2.0 * pj.density);
            forcePressure += -mass * avgPressure * spikyGrad(rij, smoothingRadius);

            // Viscosity force
            vec3 velDiff = pj.velocity.xyz - pi.velocity.xyz;
            forceViscosity += viscosity * mass * velDiff / pj.density * viscosityLaplacian(r, smoothingRadius);
        }
    }

    vec3 totalForce = forcePressure + forceViscosity + gravity * pi.density;
    vec3 acceleration = totalForce / pi.density;

    // Integration (semi-implicit Euler)
    pi.velocity.xyz += acceleration * dt;
    pi.position.xyz += pi.velocity.xyz * dt;
    pi.acceleration.xyz = acceleration;

    // Optional: Floor collision
    float floorY = -20.0;
    if (pi.position.y < floorY) {
        pi.position.y = floorY;
        pi.velocity.y *= -0.3; // basic bounce damping
    }

    particles[i] = pi;
}
